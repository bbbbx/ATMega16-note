Interrupt Vectors
    00000 940C 0030 JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    00030 E5CF      LDI	R28,0x5F
    00031 E0D4      LDI	R29,4
    00032 BFCD      OUT	0x3D,R28
    00033 BFDE      OUT	0x3E,R29
    00034 51CE      SUBI	R28,0x1E
    00035 40D0      SBCI	R29,0
    00036 EA0A      LDI	R16,0xAA
    00037 8308      ST	Y,R16
    00038 2400      CLR	R0
    00039 E6EB      LDI	R30,0x6B
    0003A E0F0      LDI	R31,0
    0003B E010      LDI	R17,0
    0003C 36EB      CPI	R30,0x6B
    0003D 07F1      CPC	R31,R17
    0003E F011      BEQ	0x0041
    0003F 9201      ST	Z+,R0
    00040 CFFB      RJMP	0x003C
    00041 8300      ST	Z,R16
    00042 E5E4      LDI	R30,0x54
    00043 E0F0      LDI	R31,0
    00044 E6A0      LDI	R26,0x60
    00045 E0B0      LDI	R27,0
    00046 E010      LDI	R17,0
    00047 E000      LDI	R16,0
    00048 BF0B      OUT	0x3B,R16
    00049 35EF      CPI	R30,0x5F
    0004A 07F1      CPC	R31,R17
    0004B F021      BEQ	0x0050
    0004C 95C8      LPM
    0004D 9631      ADIW	R30,1
    0004E 920D      ST	X+,R0
    0004F CFF9      RJMP	0x0049
    00050 940E 0068 CALL	_main
_exit:
    00052 CFFF      RJMP	_exit
_delay_ms:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    00053 940E 021C CALL	push_xgsetF000
FILE: C:\Users\z\Desktop\作业\作业4\source\7SEG.c
(0001) #include <iom16v.h>
(0002) 
(0003) void delay_ms(unsigned int n)	//延时函数
(0004) {
(0005)   unsigned int i,j;
(0006)   for(i = 0 ; i < n ; i ++)
    00055 2744      CLR	R20
    00056 2755      CLR	R21
    00057 C00B      RJMP	0x0063
(0007)     for(j = 0 ; j <1141; j ++) ;
    00058 2766      CLR	R22
    00059 2777      CLR	R23
    0005A C002      RJMP	0x005D
    0005B 5F6F      SUBI	R22,0xFF
    0005C 4F7F      SBCI	R23,0xFF
    0005D 3765      CPI	R22,0x75
    0005E E0E4      LDI	R30,4
    0005F 077E      CPC	R23,R30
    00060 F3D0      BCS	0x005B
    00061 5F4F      SUBI	R20,0xFF
    00062 4F5F      SBCI	R21,0xFF
    00063 1740      CP	R20,R16
    00064 0751      CPC	R21,R17
    00065 F390      BCS	0x0058
    00066 940C 0221 JMP	pop_xgsetF000
_main:
  numberC_1            --> R14
  numberC_2            --> R10
  rule                 --> R12
  numberB              --> R22
  numberA              --> Y,+0
    00068 9721      SBIW	R28,1
(0008) }
(0009) 
(0010) const unsigned char table_ca[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xff};  //共阳数码管键码
(0011) 
(0012) void main()
(0013) {
(0014)   unsigned char numberA=0 , numberB=0 , numberC_1=0 , numberC_2=0, rule=0;//运算法则,rule=1为 + ;rule=2为 - ;rule=3为 * ;rule=4为 /;rule=5为 =
    00069 2400      CLR	R0
    0006A 8208      ST	Y,R0
    0006B 2766      CLR	R22
    0006C 24EE      CLR	R14
    0006D 24AA      CLR	R10
    0006E 24CC      CLR	R12
(0015)   DDRA = 0x0f;
    0006F E08F      LDI	R24,0xF
    00070 BB8A      OUT	0x1A,R24
(0016)   DDRC = 0xff;
    00071 EF8F      LDI	R24,0xFF
    00072 BB84      OUT	0x14,R24
(0017)   DDRD = 0x0f;
    00073 E08F      LDI	R24,0xF
    00074 BB81      OUT	0x11,R24
(0018)   
(0019)   PORTA = 0xf0;
    00075 EF80      LDI	R24,0xF0
    00076 BB8B      OUT	0x1B,R24
(0020)   PORTC = 0x00;
    00077 2422      CLR	R2
    00078 BA25      OUT	0x15,R2
(0021)   PORTD = 0x00;
    00079 BA22      OUT	0x12,R2
    0007A C186      RJMP	0x0201
(0022)   while(1)
(0023)   {
(0024)     PORTA = 0xfe;	//扫描第一列
    0007B EF8E      LDI	R24,0xFE
    0007C BB8B      OUT	0x1B,R24
(0025) 	switch(PINA&(0xf0))
    0007D B349      IN	R20,0x19
    0007E 2755      CLR	R21
    0007F 7F40      ANDI	R20,0xF0
    00080 7050      ANDI	R21,0
    00081 3B40      CPI	R20,0xB0
    00082 E0E0      LDI	R30,0
    00083 075E      CPC	R21,R30
    00084 F0E9      BEQ	0x00A2
    00085 EB80      LDI	R24,0xB0
    00086 E090      LDI	R25,0
    00087 1784      CP	R24,R20
    00088 0795      CPC	R25,R21
    00089 F02C      BLT	0x008F
    0008A 3740      CPI	R20,0x70
    0008B E0E0      LDI	R30,0
    0008C 075E      CPC	R21,R30
    0008D F0B1      BEQ	0x00A4
    0008E C017      RJMP	0x00A6
    0008F 3D40      CPI	R20,0xD0
    00090 E0E0      LDI	R30,0
    00091 075E      CPC	R21,R30
    00092 F061      BEQ	0x009F
    00093 3D40      CPI	R20,0xD0
    00094 E0E0      LDI	R30,0
    00095 075E      CPC	R21,R30
    00096 F07C      BLT	0x00A6
    00097 3E40      CPI	R20,0xE0
    00098 E0E0      LDI	R30,0
    00099 075E      CPC	R21,R30
    0009A F009      BEQ	0x009C
    0009B C00A      RJMP	0x00A6
(0026) 	{
(0027) 	  case 0xe0: numberA=0 ; 
    0009C 2400      CLR	R0
    0009D 8208      ST	Y,R0
(0028) 	  	   		 break;
    0009E C007      RJMP	0x00A6
(0029) 	  case 0xd0: numberA=4 ; 
    0009F E084      LDI	R24,4
    000A0 8388      ST	Y,R24
(0030) 	  	   		 break;
    000A1 C004      RJMP	0x00A6
(0031) 	  case 0xb0: numberB=3 ; 
    000A2 E063      LDI	R22,3
(0032) 	  	   		 break;
    000A3 C002      RJMP	0x00A6
(0033) 	  case 0x70: rule=2 ;
    000A4 E082      LDI	R24,2
    000A5 2EC8      MOV	R12,R24
(0034) 	  	   		 break;
(0035) 	}
(0036) 	
(0037) 	PORTD = 0x01;
    000A6 E081      LDI	R24,1
    000A7 BB82      OUT	0x12,R24
(0038) 	PORTC = table_ca[numberA];  //因第一列只可以设置numberA，所以渲染numberA
    000A8 E680      LDI	R24,0x60
    000A9 E090      LDI	R25,0
    000AA 81E8      LD	R30,Y
    000AB 27FF      CLR	R31
    000AC 0FE8      ADD	R30,R24
    000AD 1FF9      ADC	R31,R25
    000AE 8020      LD	R2,Z
    000AF BA25      OUT	0x15,R2
(0039) 	delay_ms(10);
    000B0 E00A      LDI	R16,0xA
    000B1 E010      LDI	R17,0
    000B2 DFA0      RCALL	_delay_ms
(0040) 	
(0041) 	PORTA = 0xfd;	//扫描第二列
    000B3 EF8D      LDI	R24,0xFD
    000B4 BB8B      OUT	0x1B,R24
(0042) 	switch(PINA&(0xf0))
    000B5 B349      IN	R20,0x19
    000B6 2755      CLR	R21
    000B7 7F40      ANDI	R20,0xF0
    000B8 7050      ANDI	R21,0
    000B9 3B40      CPI	R20,0xB0
    000BA E0E0      LDI	R30,0
    000BB 075E      CPC	R21,R30
    000BC F0F1      BEQ	0x00DB
    000BD EB80      LDI	R24,0xB0
    000BE E090      LDI	R25,0
    000BF 1784      CP	R24,R20
    000C0 0795      CPC	R25,R21
    000C1 F02C      BLT	0x00C7
    000C2 3740      CPI	R20,0x70
    000C3 E0E0      LDI	R30,0
    000C4 075E      CPC	R21,R30
    000C5 F0B9      BEQ	0x00DD
    000C6 C018      RJMP	0x00DF
    000C7 3D40      CPI	R20,0xD0
    000C8 E0E0      LDI	R30,0
    000C9 075E      CPC	R21,R30
    000CA F069      BEQ	0x00D8
    000CB 3D40      CPI	R20,0xD0
    000CC E0E0      LDI	R30,0
    000CD 075E      CPC	R21,R30
    000CE F084      BLT	0x00DF
    000CF 3E40      CPI	R20,0xE0
    000D0 E0E0      LDI	R30,0
    000D1 075E      CPC	R21,R30
    000D2 F009      BEQ	0x00D4
    000D3 C00B      RJMP	0x00DF
(0043) 	{
(0044) 	  case 0xe0: numberA=1 ;
    000D4 2400      CLR	R0
    000D5 9403      INC	R0
    000D6 8208      ST	Y,R0
(0045) 	  	   		 break;
    000D7 C007      RJMP	0x00DF
(0046) 	  case 0xd0: numberA=5 ;
    000D8 E085      LDI	R24,5
    000D9 8388      ST	Y,R24
(0047) 	  	   		 break;
    000DA C004      RJMP	0x00DF
(0048) 	  case 0xb0: numberB=4 ;
    000DB E064      LDI	R22,4
(0049) 	  	   		 break;
    000DC C002      RJMP	0x00DF
(0050) 	  case 0x70: rule = 3 ;
    000DD E083      LDI	R24,3
    000DE 2EC8      MOV	R12,R24
(0051) 	  	   		 break;
(0052) 	}
(0053) 	
(0054) 	PORTD = 0x01;
    000DF E081      LDI	R24,1
    000E0 BB82      OUT	0x12,R24
(0055) 	PORTC = table_ca[numberA];    //渲染numberA
    000E1 E680      LDI	R24,0x60
    000E2 E090      LDI	R25,0
    000E3 81E8      LD	R30,Y
    000E4 27FF      CLR	R31
    000E5 0FE8      ADD	R30,R24
    000E6 1FF9      ADC	R31,R25
    000E7 8020      LD	R2,Z
    000E8 BA25      OUT	0x15,R2
(0056) 	delay_ms(5);
    000E9 E005      LDI	R16,5
    000EA E010      LDI	R17,0
    000EB DF67      RCALL	_delay_ms
(0057) 	
(0058) 	PORTD = 0x02;
    000EC E082      LDI	R24,2
    000ED BB82      OUT	0x12,R24
(0059) 	PORTC = table_ca[numberB];    //渲染numberB
    000EE E680      LDI	R24,0x60
    000EF E090      LDI	R25,0
    000F0 2FE6      MOV	R30,R22
    000F1 27FF      CLR	R31
    000F2 0FE8      ADD	R30,R24
    000F3 1FF9      ADC	R31,R25
    000F4 8020      LD	R2,Z
    000F5 BA25      OUT	0x15,R2
(0060) 	delay_ms(5);
    000F6 E005      LDI	R16,5
    000F7 E010      LDI	R17,0
    000F8 DF5A      RCALL	_delay_ms
(0061) 	
(0062) 	PORTA = 0xfb;	//扫描第三列
    000F9 EF8B      LDI	R24,0xFB
    000FA BB8B      OUT	0x1B,R24
(0063) 	switch(PINA&(0xf0))
    000FB B349      IN	R20,0x19
    000FC 2755      CLR	R21
    000FD 7F40      ANDI	R20,0xF0
    000FE 7050      ANDI	R21,0
    000FF 3B40      CPI	R20,0xB0
    00100 E0E0      LDI	R30,0
    00101 075E      CPC	R21,R30
    00102 F0E1      BEQ	0x011F
    00103 EB80      LDI	R24,0xB0
    00104 E090      LDI	R25,0
    00105 1784      CP	R24,R20
    00106 0795      CPC	R25,R21
    00107 F02C      BLT	0x010D
    00108 3740      CPI	R20,0x70
    00109 E0E0      LDI	R30,0
    0010A 075E      CPC	R21,R30
    0010B F0A9      BEQ	0x0121
    0010C C016      RJMP	0x0123
    0010D 3D40      CPI	R20,0xD0
    0010E E0E0      LDI	R30,0
    0010F 075E      CPC	R21,R30
    00110 F061      BEQ	0x011D
    00111 3D40      CPI	R20,0xD0
    00112 E0E0      LDI	R30,0
    00113 075E      CPC	R21,R30
    00114 F074      BLT	0x0123
    00115 3E40      CPI	R20,0xE0
    00116 E0E0      LDI	R30,0
    00117 075E      CPC	R21,R30
    00118 F009      BEQ	0x011A
    00119 C009      RJMP	0x0123
(0064) 	{
(0065) 	  case 0xe0: numberA=2 ;
    0011A E082      LDI	R24,2
    0011B 8388      ST	Y,R24
(0066) 	  	   		 break;
    0011C C006      RJMP	0x0123
(0067) 	  case 0xd0: numberB=1 ;
    0011D E061      LDI	R22,1
(0068) 	  	   		 break;
    0011E C004      RJMP	0x0123
(0069) 	  case 0xb0: numberB=5 ;
    0011F E065      LDI	R22,5
(0070) 	  	   		 break;
    00120 C002      RJMP	0x0123
(0071) 	  case 0x70: rule=4 ;
    00121 E084      LDI	R24,4
    00122 2EC8      MOV	R12,R24
(0072) 	  	   		 break;
(0073) 	}
(0074) 	
(0075) 	PORTD = 0x01;
    00123 E081      LDI	R24,1
    00124 BB82      OUT	0x12,R24
(0076) 	PORTC = table_ca[numberA];    //渲染numberA
    00125 E680      LDI	R24,0x60
    00126 E090      LDI	R25,0
    00127 81E8      LD	R30,Y
    00128 27FF      CLR	R31
    00129 0FE8      ADD	R30,R24
    0012A 1FF9      ADC	R31,R25
    0012B 8020      LD	R2,Z
    0012C BA25      OUT	0x15,R2
(0077) 	delay_ms(5);
    0012D E005      LDI	R16,5
    0012E E010      LDI	R17,0
    0012F DF23      RCALL	_delay_ms
(0078) 	
(0079) 	PORTD = 0x02;
    00130 E082      LDI	R24,2
    00131 BB82      OUT	0x12,R24
(0080) 	PORTC = table_ca[numberB];    //渲染numberB
    00132 E680      LDI	R24,0x60
    00133 E090      LDI	R25,0
    00134 2FE6      MOV	R30,R22
    00135 27FF      CLR	R31
    00136 0FE8      ADD	R30,R24
    00137 1FF9      ADC	R31,R25
    00138 8020      LD	R2,Z
    00139 BA25      OUT	0x15,R2
(0081) 	delay_ms(5);
    0013A E005      LDI	R16,5
    0013B E010      LDI	R17,0
    0013C DF16      RCALL	_delay_ms
(0082) 	
(0083) 	PORTA = 0xf7;	//扫描第四列
    0013D EF87      LDI	R24,0xF7
    0013E BB8B      OUT	0x1B,R24
(0084) 	switch(PINA&(0xf0))
    0013F B349      IN	R20,0x19
    00140 2755      CLR	R21
    00141 7F40      ANDI	R20,0xF0
    00142 7050      ANDI	R21,0
    00143 3B40      CPI	R20,0xB0
    00144 E0E0      LDI	R30,0
    00145 075E      CPC	R21,R30
    00146 F0E1      BEQ	0x0163
    00147 EB80      LDI	R24,0xB0
    00148 E090      LDI	R25,0
    00149 1784      CP	R24,R20
    0014A 0795      CPC	R25,R21
    0014B F02C      BLT	0x0151
    0014C 3740      CPI	R20,0x70
    0014D E0E0      LDI	R30,0
    0014E 075E      CPC	R21,R30
    0014F F0B1      BEQ	0x0166
    00150 C017      RJMP	0x0168
    00151 3D40      CPI	R20,0xD0
    00152 E0E0      LDI	R30,0
    00153 075E      CPC	R21,R30
    00154 F061      BEQ	0x0161
    00155 3D40      CPI	R20,0xD0
    00156 E0E0      LDI	R30,0
    00157 075E      CPC	R21,R30
    00158 F07C      BLT	0x0168
    00159 3E40      CPI	R20,0xE0
    0015A E0E0      LDI	R30,0
    0015B 075E      CPC	R21,R30
    0015C F009      BEQ	0x015E
    0015D C00A      RJMP	0x0168
(0085) 	{
(0086) 	  case 0xe0: numberA=3 ;
    0015E E083      LDI	R24,3
    0015F 8388      ST	Y,R24
(0087) 	  	   		 break;
    00160 C007      RJMP	0x0168
(0088) 	  case 0xd0: numberB=2 ; 
    00161 E062      LDI	R22,2
(0089) 	  	   		 break;
    00162 C005      RJMP	0x0168
(0090) 	  case 0xb0: rule=1 ; 
    00163 24CC      CLR	R12
    00164 94C3      INC	R12
(0091) 	  	   		 break;
    00165 C002      RJMP	0x0168
(0092) 	  case 0x70: rule=5 ; 
    00166 E085      LDI	R24,5
    00167 2EC8      MOV	R12,R24
(0093) 	  	   		 break;
(0094) 	}
(0095) 	
(0096) 	PORTD = 0x01;
    00168 E081      LDI	R24,1
    00169 BB82      OUT	0x12,R24
(0097) 	PORTC = table_ca[numberA];    //渲染numberA
    0016A E680      LDI	R24,0x60
    0016B E090      LDI	R25,0
    0016C 81E8      LD	R30,Y
    0016D 27FF      CLR	R31
    0016E 0FE8      ADD	R30,R24
    0016F 1FF9      ADC	R31,R25
    00170 8020      LD	R2,Z
    00171 BA25      OUT	0x15,R2
(0098) 	delay_ms(5);
    00172 E005      LDI	R16,5
    00173 E010      LDI	R17,0
    00174 DEDE      RCALL	_delay_ms
(0099) 	
(0100) 	PORTD = 0x02;
    00175 E082      LDI	R24,2
    00176 BB82      OUT	0x12,R24
(0101) 	PORTC = table_ca[numberB];    //渲染numberB
    00177 E680      LDI	R24,0x60
    00178 E090      LDI	R25,0
    00179 2FE6      MOV	R30,R22
    0017A 27FF      CLR	R31
    0017B 0FE8      ADD	R30,R24
    0017C 1FF9      ADC	R31,R25
    0017D 8020      LD	R2,Z
    0017E BA25      OUT	0x15,R2
(0102) 	delay_ms(5);
    0017F E005      LDI	R16,5
    00180 E010      LDI	R17,0
    00181 DED1      RCALL	_delay_ms
(0103) 	
(0104) 	switch(rule)
    00182 2D4C      MOV	R20,R12
    00183 2755      CLR	R21
    00184 3041      CPI	R20,1
    00185 E0E0      LDI	R30,0
    00186 075E      CPC	R21,R30
    00187 F099      BEQ	0x019B
    00188 3042      CPI	R20,2
    00189 E0E0      LDI	R30,0
    0018A 075E      CPC	R21,R30
    0018B F101      BEQ	0x01AC
    0018C 3043      CPI	R20,3
    0018D E0E0      LDI	R30,0
    0018E 075E      CPC	R21,R30
    0018F F169      BEQ	0x01BD
    00190 3044      CPI	R20,4
    00191 E0E0      LDI	R30,0
    00192 075E      CPC	R21,R30
    00193 F409      BNE	0x0195
    00194 C03B      RJMP	0x01D0
    00195 3045      CPI	R20,5
    00196 E0E0      LDI	R30,0
    00197 075E      CPC	R21,R30
    00198 F409      BNE	0x019A
    00199 C04D      RJMP	0x01E7
    0019A C066      RJMP	0x0201
(0105) 	{
(0106) 	  case 1: numberC_2 = (numberA+numberB)%10;		  			       //获得和的个位数
    0019B 8108      LD	R16,Y
    0019C 0F06      ADD	R16,R22
    0019D E01A      LDI	R17,0xA
    0019E 940E 0204 CALL	mod8u
    001A0 2EA0      MOV	R10,R16
(0107) 	  	   	  numberC_1 = ((numberA+numberB-numberC_2)/10)%10;		   //获得和的十位数
    001A1 8108      LD	R16,Y
    001A2 0F06      ADD	R16,R22
    001A3 190A      SUB	R16,R10
    001A4 E01A      LDI	R17,0xA
    001A5 940E 0206 CALL	div8u
    001A7 E01A      LDI	R17,0xA
    001A8 940E 0204 CALL	mod8u
    001AA 2EE0      MOV	R14,R16
(0108) 			  break; 
    001AB C055      RJMP	0x0201
(0109) 	  case 2: numberC_2 = (numberA-numberB)%10;		  			       //获得差的个位数
    001AC 8108      LD	R16,Y
    001AD 1B06      SUB	R16,R22
    001AE E01A      LDI	R17,0xA
    001AF 940E 0204 CALL	mod8u
    001B1 2EA0      MOV	R10,R16
(0110) 	  	   	  numberC_1 = ((numberA-numberB-numberC_2)/10)%10;		   //获得差的十位数
    001B2 8108      LD	R16,Y
    001B3 1B06      SUB	R16,R22
    001B4 190A      SUB	R16,R10
    001B5 E01A      LDI	R17,0xA
    001B6 940E 0206 CALL	div8u
    001B8 E01A      LDI	R17,0xA
    001B9 940E 0204 CALL	mod8u
    001BB 2EE0      MOV	R14,R16
(0111) 			  break; 
    001BC C044      RJMP	0x0201
(0112) 	  case 3: numberC_2 = (numberA*numberB)%10;		  			       //获得积的个位数
    001BD 8008      LD	R0,Y
    001BE 9E06      MUL	R0,R22
    001BF E01A      LDI	R17,0xA
    001C0 2D00      MOV	R16,R0
    001C1 940E 0204 CALL	mod8u
    001C3 2EA0      MOV	R10,R16
(0113) 	  	   	  numberC_1 = ((numberA*numberB-numberC_2)/10)%10;		   //获得积的十位数
    001C4 8008      LD	R0,Y
    001C5 9E06      MUL	R0,R22
    001C6 2D00      MOV	R16,R0
    001C7 190A      SUB	R16,R10
    001C8 E01A      LDI	R17,0xA
    001C9 940E 0206 CALL	div8u
    001CB E01A      LDI	R17,0xA
    001CC 940E 0204 CALL	mod8u
    001CE 2EE0      MOV	R14,R16
(0114) 			  break; 
    001CF C031      RJMP	0x0201
(0115) 	  case 4: numberC_2 = (numberA/numberB)%10;		  			       //获得商的个位数
    001D0 2F16      MOV	R17,R22
    001D1 8108      LD	R16,Y
    001D2 940E 0206 CALL	div8u
    001D4 E01A      LDI	R17,0xA
    001D5 940E 0204 CALL	mod8u
    001D7 2EA0      MOV	R10,R16
(0116) 	  	   	  numberC_1 = ((numberA/numberB-numberC_2)/10)%10;		   //获得商的十位数
    001D8 2F16      MOV	R17,R22
    001D9 8108      LD	R16,Y
    001DA 940E 0206 CALL	div8u
    001DC 2E20      MOV	R2,R16
    001DD 182A      SUB	R2,R10
    001DE E01A      LDI	R17,0xA
    001DF 2D02      MOV	R16,R2
    001E0 940E 0206 CALL	div8u
    001E2 E01A      LDI	R17,0xA
    001E3 940E 0204 CALL	mod8u
    001E5 2EE0      MOV	R14,R16
(0117) 			  break; 
    001E6 C01A      RJMP	0x0201
(0118) 	  case 5: PORTD = 0x04;
    001E7 E084      LDI	R24,4
    001E8 BB82      OUT	0x12,R24
(0119) 	  	   	  PORTC = table_ca[numberC_1];    //渲染numberC的十位数
    001E9 E680      LDI	R24,0x60
    001EA E090      LDI	R25,0
    001EB 2DEE      MOV	R30,R14
    001EC 27FF      CLR	R31
    001ED 0FE8      ADD	R30,R24
    001EE 1FF9      ADC	R31,R25
    001EF 8020      LD	R2,Z
    001F0 BA25      OUT	0x15,R2
(0120) 			  delay_ms(10);
    001F1 E00A      LDI	R16,0xA
    001F2 E010      LDI	R17,0
    001F3 DE5F      RCALL	_delay_ms
(0121) 			  
(0122) 			  PORTD = 0x08;
    001F4 E088      LDI	R24,0x8
    001F5 BB82      OUT	0x12,R24
(0123) 			  PORTC = table_ca[numberC_2];    //渲染numberC的个位数
    001F6 E680      LDI	R24,0x60
    001F7 E090      LDI	R25,0
    001F8 2DEA      MOV	R30,R10
    001F9 27FF      CLR	R31
    001FA 0FE8      ADD	R30,R24
    001FB 1FF9      ADC	R31,R25
    001FC 8020      LD	R2,Z
    001FD BA25      OUT	0x15,R2
(0124) 			  delay_ms(10);
FILE: <library>
    001FE E00A      LDI	R16,0xA
    001FF E010      LDI	R17,0
    00200 DE52      RCALL	_delay_ms
    00201 CE79      RJMP	0x007B
    00202 9621      ADIW	R28,1
    00203 9508      RET
mod8u:
    00204 9468      BSET	6
    00205 C001      RJMP	xdiv8u
div8u:
    00206 94E8      BCLR	6
xdiv8u:
    00207 932A      ST	-Y,R18
    00208 92FA      ST	-Y,R15
    00209 92EA      ST	-Y,R14
    0020A 24FF      CLR	R15
    0020B 24EE      CLR	R14
    0020C E120      LDI	R18,0x10
    0020D 0F00      LSL	R16
    0020E 1CFF      ROL	R15
    0020F 1CEE      ROL	R14
    00210 16E1      CP	R14,R17
    00211 F010      BCS	0x0214
    00212 1AE1      SUB	R14,R17
    00213 9503      INC	R16
    00214 952A      DEC	R18
    00215 F7B9      BNE	0x020D
    00216 F40E      BRTC	0x0218
    00217 2D0E      MOV	R16,R14
    00218 90E9      LD	R14,Y+
    00219 90F9      LD	R15,Y+
    0021A 9129      LD	R18,Y+
    0021B 9508      RET
push_xgsetF000:
    0021C 937A      ST	-Y,R23
    0021D 936A      ST	-Y,R22
    0021E 935A      ST	-Y,R21
    0021F 934A      ST	-Y,R20
    00220 9508      RET
pop_xgsetF000:
    00221 9149      LD	R20,Y+
    00222 9159      LD	R21,Y+
    00223 9169      LD	R22,Y+
    00224 9179      LD	R23,Y+
    00225 9508      RET

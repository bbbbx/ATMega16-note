Interrupt Vectors
    00000 940C 002B JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002B E5CF      LDI	R28,0x5F
    0002C E0D4      LDI	R29,4
    0002D BFCD      OUT	0x3D,R28
    0002E BFDE      OUT	0x3E,R29
    0002F 51CE      SUBI	R28,0x1E
    00030 40D0      SBCI	R29,0
    00031 EA0A      LDI	R16,0xAA
    00032 8308      ST	Y,R16
    00033 2400      CLR	R0
    00034 E6E1      LDI	R30,0x61
    00035 E0F0      LDI	R31,0
    00036 E010      LDI	R17,0
    00037 36E1      CPI	R30,0x61
    00038 07F1      CPC	R31,R17
    00039 F011      BEQ	0x003C
    0003A 9201      ST	Z+,R0
    0003B CFFB      RJMP	0x0037
    0003C 8300      ST	Z,R16
    0003D E5E4      LDI	R30,0x54
    0003E E0F0      LDI	R31,0
    0003F E6A0      LDI	R26,0x60
    00040 E0B0      LDI	R27,0
    00041 E010      LDI	R17,0
    00042 E000      LDI	R16,0
    00043 BF0B      OUT	0x3B,R16
    00044 35E5      CPI	R30,0x55
    00045 07F1      CPC	R31,R17
    00046 F021      BEQ	0x004B
    00047 95C8      LPM
    00048 9631      ADIW	R30,1
    00049 920D      ST	X+,R0
    0004A CFF9      RJMP	0x0044
    0004B 940E 02F2 CALL	_main
_exit:
    0004D CFFF      RJMP	_exit
_delay:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    0004E 940E 0326 CALL	push_xgsetF000
FILE: C:\Users\z\Desktop\作业\作业4\source\LED.c
(0001) #include <iom16v.h>
(0002) 
(0003) const unsigned char delayMs = 100;  //延时，单位：ms
(0004) 
(0005) void delay(int n)  //延时函数
(0006) {
(0007)   int i , j;
(0008)   for (i = 0 ; i < n ; i ++)  
    00050 2744      CLR	R20
    00051 2755      CLR	R21
    00052 C00A      RJMP	0x005D
(0009)     for(j = 0 ; j < 1141 ; j++)  ;
    00053 2766      CLR	R22
    00054 2777      CLR	R23
    00055 5F6F      SUBI	R22,0xFF
    00056 4F7F      SBCI	R23,0xFF
    00057 3765      CPI	R22,0x75
    00058 E0E4      LDI	R30,4
    00059 077E      CPC	R23,R30
    0005A F3D4      BLT	0x0055
    0005B 5F4F      SUBI	R20,0xFF
    0005C 4F5F      SBCI	R21,0xFF
    0005D 1740      CP	R20,R16
    0005E 0751      CPC	R21,R17
    0005F F39C      BLT	0x0053
    00060 940C 032B JMP	pop_xgsetF000
(0010) }
(0011) 
(0012) void LED_down_0()  //按下下按键时
(0013) {
(0014)   if((PINC & (1<<PC3)) == 0)
_LED_down_0:
    00062 999B      SBIC	0x13,3
    00063 C03A      RJMP	0x009E
(0015)   {
    00064 C038      RJMP	0x009D
(0016)     while(1)
(0017) 	{
(0018)       PORTA = 0x01;
    00065 E081      LDI	R24,1
    00066 BB8B      OUT	0x1B,R24
(0019) 	  delay(delayMs);
    00067 9100 0060 LDS	R16,delayMs
    00069 2711      CLR	R17
    0006A DFE3      RCALL	_delay
(0020) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    0006B 9B98      SBIS	0x13,0
    0006C C004      RJMP	0x0071
    0006D 9B99      SBIS	0x13,1
    0006E C002      RJMP	0x0071
    0006F 999A      SBIC	0x13,2
    00070 C001      RJMP	0x0072
(0021) 	    break;
    00071 C02C      RJMP	0x009E
(0022) 	  PORTA = 0x10;
    00072 E180      LDI	R24,0x10
    00073 BB8B      OUT	0x1B,R24
(0023) 	  delay(delayMs);
    00074 9100 0060 LDS	R16,delayMs
    00076 2711      CLR	R17
    00077 DFD6      RCALL	_delay
(0024) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00078 9B98      SBIS	0x13,0
    00079 C004      RJMP	0x007E
    0007A 9B99      SBIS	0x13,1
    0007B C002      RJMP	0x007E
    0007C 999A      SBIC	0x13,2
    0007D C001      RJMP	0x007F
(0025) 	    break;
    0007E C01F      RJMP	0x009E
(0026) 	  PORTA = 0x00;
    0007F 2422      CLR	R2
    00080 BA2B      OUT	0x1B,R2
(0027) 	  PORTB = 0x01;
    00081 E081      LDI	R24,1
    00082 BB88      OUT	0x18,R24
(0028) 	  delay(delayMs);
    00083 9100 0060 LDS	R16,delayMs
    00085 2711      CLR	R17
    00086 DFC7      RCALL	_delay
(0029) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00087 9B98      SBIS	0x13,0
    00088 C004      RJMP	0x008D
    00089 9B99      SBIS	0x13,1
    0008A C002      RJMP	0x008D
    0008B 999A      SBIC	0x13,2
    0008C C001      RJMP	0x008E
(0030) 	    break;
    0008D C010      RJMP	0x009E
(0031) 	  PORTB = 0x10;
    0008E E180      LDI	R24,0x10
    0008F BB88      OUT	0x18,R24
(0032) 	  delay(delayMs);
    00090 9100 0060 LDS	R16,delayMs
    00092 2711      CLR	R17
    00093 DFBA      RCALL	_delay
(0033) 	  PORTB = 0x00;
    00094 2422      CLR	R2
    00095 BA28      OUT	0x18,R2
(0034) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00096 9B98      SBIS	0x13,0
    00097 C004      RJMP	0x009C
    00098 9B99      SBIS	0x13,1
    00099 C002      RJMP	0x009C
    0009A 999A      SBIC	0x13,2
    0009B C001      RJMP	0x009D
(0035) 	    break;
    0009C C001      RJMP	0x009E
    0009D CFC7      RJMP	0x0065
(0036) 	}
(0037)   }
    0009E 9508      RET
(0038) }
(0039) 
(0040) void LED_down_1()  //按下下按键时
(0041) {
(0042)   if((PINC & (1<<PC3)) == 0)
_LED_down_1:
    0009F 999B      SBIC	0x13,3
    000A0 C03A      RJMP	0x00DB
(0043)   {
    000A1 C038      RJMP	0x00DA
(0044)     while(1)
(0045) 	{
(0046)       PORTA = 0x02;
    000A2 E082      LDI	R24,2
    000A3 BB8B      OUT	0x1B,R24
(0047) 	  delay(delayMs);
    000A4 9100 0060 LDS	R16,delayMs
    000A6 2711      CLR	R17
    000A7 DFA6      RCALL	_delay
(0048) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000A8 9B98      SBIS	0x13,0
    000A9 C004      RJMP	0x00AE
    000AA 9B99      SBIS	0x13,1
    000AB C002      RJMP	0x00AE
    000AC 999A      SBIC	0x13,2
    000AD C001      RJMP	0x00AF
(0049) 	    break;
    000AE C02C      RJMP	0x00DB
(0050) 	  PORTA = 0x20;
    000AF E280      LDI	R24,0x20
    000B0 BB8B      OUT	0x1B,R24
(0051) 	  delay(delayMs);
    000B1 9100 0060 LDS	R16,delayMs
    000B3 2711      CLR	R17
    000B4 DF99      RCALL	_delay
(0052) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000B5 9B98      SBIS	0x13,0
    000B6 C004      RJMP	0x00BB
    000B7 9B99      SBIS	0x13,1
    000B8 C002      RJMP	0x00BB
    000B9 999A      SBIC	0x13,2
    000BA C001      RJMP	0x00BC
(0053) 	    break;
    000BB C01F      RJMP	0x00DB
(0054) 	  PORTA = 0x00;
    000BC 2422      CLR	R2
    000BD BA2B      OUT	0x1B,R2
(0055) 	  PORTB = 0x02;
    000BE E082      LDI	R24,2
    000BF BB88      OUT	0x18,R24
(0056) 	  delay(delayMs);
    000C0 9100 0060 LDS	R16,delayMs
    000C2 2711      CLR	R17
    000C3 DF8A      RCALL	_delay
(0057) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000C4 9B98      SBIS	0x13,0
    000C5 C004      RJMP	0x00CA
    000C6 9B99      SBIS	0x13,1
    000C7 C002      RJMP	0x00CA
    000C8 999A      SBIC	0x13,2
    000C9 C001      RJMP	0x00CB
(0058) 	    break;
    000CA C010      RJMP	0x00DB
(0059) 	  PORTB = 0x20;
    000CB E280      LDI	R24,0x20
    000CC BB88      OUT	0x18,R24
(0060) 	  delay(delayMs);
    000CD 9100 0060 LDS	R16,delayMs
    000CF 2711      CLR	R17
    000D0 DF7D      RCALL	_delay
(0061) 	  PORTB = 0x00;
    000D1 2422      CLR	R2
    000D2 BA28      OUT	0x18,R2
(0062) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000D3 9B98      SBIS	0x13,0
    000D4 C004      RJMP	0x00D9
    000D5 9B99      SBIS	0x13,1
    000D6 C002      RJMP	0x00D9
    000D7 999A      SBIC	0x13,2
    000D8 C001      RJMP	0x00DA
(0063) 	    break;
    000D9 C001      RJMP	0x00DB
    000DA CFC7      RJMP	0x00A2
(0064) 	}
(0065)   }
    000DB 9508      RET
(0066) }
(0067) 
(0068) void LED_down_2()  //按下下按键时
(0069) {
(0070)   if((PINC & (1<<PC3)) == 0)
_LED_down_2:
    000DC 999B      SBIC	0x13,3
    000DD C03A      RJMP	0x0118
(0071)   {
    000DE C038      RJMP	0x0117
(0072)     while(1)
(0073) 	{
(0074)       PORTA = 0x04;
    000DF E084      LDI	R24,4
    000E0 BB8B      OUT	0x1B,R24
(0075) 	  delay(delayMs);
    000E1 9100 0060 LDS	R16,delayMs
    000E3 2711      CLR	R17
    000E4 DF69      RCALL	_delay
(0076) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000E5 9B98      SBIS	0x13,0
    000E6 C004      RJMP	0x00EB
    000E7 9B99      SBIS	0x13,1
    000E8 C002      RJMP	0x00EB
    000E9 999A      SBIC	0x13,2
    000EA C001      RJMP	0x00EC
(0077) 	    break;
    000EB C02C      RJMP	0x0118
(0078) 	  PORTA = 0x40;
    000EC E480      LDI	R24,0x40
    000ED BB8B      OUT	0x1B,R24
(0079) 	  delay(delayMs);
    000EE 9100 0060 LDS	R16,delayMs
    000F0 2711      CLR	R17
    000F1 DF5C      RCALL	_delay
(0080) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    000F2 9B98      SBIS	0x13,0
    000F3 C004      RJMP	0x00F8
    000F4 9B99      SBIS	0x13,1
    000F5 C002      RJMP	0x00F8
    000F6 999A      SBIC	0x13,2
    000F7 C001      RJMP	0x00F9
(0081) 	    break;
    000F8 C01F      RJMP	0x0118
(0082) 	  PORTA = 0x00;
    000F9 2422      CLR	R2
    000FA BA2B      OUT	0x1B,R2
(0083) 	  PORTB = 0x04;
    000FB E084      LDI	R24,4
    000FC BB88      OUT	0x18,R24
(0084) 	  delay(delayMs);
    000FD 9100 0060 LDS	R16,delayMs
    000FF 2711      CLR	R17
    00100 DF4D      RCALL	_delay
(0085) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00101 9B98      SBIS	0x13,0
    00102 C004      RJMP	0x0107
    00103 9B99      SBIS	0x13,1
    00104 C002      RJMP	0x0107
    00105 999A      SBIC	0x13,2
    00106 C001      RJMP	0x0108
(0086) 	    break;
    00107 C010      RJMP	0x0118
(0087) 	  PORTB = 0x40;
    00108 E480      LDI	R24,0x40
    00109 BB88      OUT	0x18,R24
(0088) 	  delay(delayMs);
    0010A 9100 0060 LDS	R16,delayMs
    0010C 2711      CLR	R17
    0010D DF40      RCALL	_delay
(0089) 	  PORTB = 0x00;
    0010E 2422      CLR	R2
    0010F BA28      OUT	0x18,R2
(0090) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00110 9B98      SBIS	0x13,0
    00111 C004      RJMP	0x0116
    00112 9B99      SBIS	0x13,1
    00113 C002      RJMP	0x0116
    00114 999A      SBIC	0x13,2
    00115 C001      RJMP	0x0117
(0091) 	    break;
    00116 C001      RJMP	0x0118
    00117 CFC7      RJMP	0x00DF
(0092) 	}
(0093)   }
    00118 9508      RET
(0094) }
(0095) 
(0096) void LED_down_3()  //按下下按键时
(0097) {
(0098)   if((PINC & (1<<PC3)) == 0)
_LED_down_3:
    00119 999B      SBIC	0x13,3
    0011A C03A      RJMP	0x0155
(0099)   {
    0011B C038      RJMP	0x0154
(0100)     while(1)
(0101) 	{
(0102)       PORTA = 0x08;
    0011C E088      LDI	R24,0x8
    0011D BB8B      OUT	0x1B,R24
(0103) 	  delay(delayMs);
    0011E 9100 0060 LDS	R16,delayMs
    00120 2711      CLR	R17
    00121 DF2C      RCALL	_delay
(0104) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    00122 9B98      SBIS	0x13,0
    00123 C004      RJMP	0x0128
    00124 9B99      SBIS	0x13,1
    00125 C002      RJMP	0x0128
    00126 999A      SBIC	0x13,2
    00127 C001      RJMP	0x0129
(0105) 	    break;
    00128 C02C      RJMP	0x0155
(0106) 	  PORTA = 0x80;
    00129 E880      LDI	R24,0x80
    0012A BB8B      OUT	0x1B,R24
(0107) 	  delay(delayMs);
    0012B 9100 0060 LDS	R16,delayMs
    0012D 2711      CLR	R17
    0012E DF1F      RCALL	_delay
(0108) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    0012F 9B98      SBIS	0x13,0
    00130 C004      RJMP	0x0135
    00131 9B99      SBIS	0x13,1
    00132 C002      RJMP	0x0135
    00133 999A      SBIC	0x13,2
    00134 C001      RJMP	0x0136
(0109) 	    break;
    00135 C01F      RJMP	0x0155
(0110) 	  PORTA = 0x00;
    00136 2422      CLR	R2
    00137 BA2B      OUT	0x1B,R2
(0111) 	  PORTB = 0x08;
    00138 E088      LDI	R24,0x8
    00139 BB88      OUT	0x18,R24
(0112) 	  delay(delayMs);
    0013A 9100 0060 LDS	R16,delayMs
    0013C 2711      CLR	R17
    0013D DF10      RCALL	_delay
(0113) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    0013E 9B98      SBIS	0x13,0
    0013F C004      RJMP	0x0144
    00140 9B99      SBIS	0x13,1
    00141 C002      RJMP	0x0144
    00142 999A      SBIC	0x13,2
    00143 C001      RJMP	0x0145
(0114) 	    break;
    00144 C010      RJMP	0x0155
(0115) 	  PORTB = 0x80;
    00145 E880      LDI	R24,0x80
    00146 BB88      OUT	0x18,R24
(0116) 	  delay(delayMs);
    00147 9100 0060 LDS	R16,delayMs
    00149 2711      CLR	R17
    0014A DF03      RCALL	_delay
(0117) 	  PORTB = 0x00;
    0014B 2422      CLR	R2
    0014C BA28      OUT	0x18,R2
(0118) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC2))==0) //若按下其他的按键则跳出循环
    0014D 9B98      SBIS	0x13,0
    0014E C004      RJMP	0x0153
    0014F 9B99      SBIS	0x13,1
    00150 C002      RJMP	0x0153
    00151 999A      SBIC	0x13,2
    00152 C001      RJMP	0x0154
(0119) 	    break;
    00153 C001      RJMP	0x0155
    00154 CFC7      RJMP	0x011C
(0120) 	}
(0121)   }
    00155 9508      RET
(0122) }
(0123) 
(0124) void LED_down()
(0125) {
(0126)   if(((PINA&(1<<PA0))==1) || ((PINA&(1<<4))==1) || ((PINB&(1<<PB0))==1) || ((PINB&(1<<4))==1))  //判断此时灯在何处是亮的
_LED_down:
    00156 B389      IN	R24,0x19
    00157 7081      ANDI	R24,1
    00158 3081      CPI	R24,1
    00159 F061      BEQ	0x0166
    0015A B389      IN	R24,0x19
    0015B 7180      ANDI	R24,0x10
    0015C 3081      CPI	R24,1
    0015D F041      BEQ	0x0166
    0015E B386      IN	R24,0x16
    0015F 7081      ANDI	R24,1
    00160 3081      CPI	R24,1
    00161 F021      BEQ	0x0166
    00162 B386      IN	R24,0x16
    00163 7180      ANDI	R24,0x10
    00164 3081      CPI	R24,1
    00165 F409      BNE	0x0167
(0127)   {
(0128)     LED_down_0();
    00166 DEFB      RCALL	_LED_down_0
(0129)   }
(0130)   if(((PINA&(1<<1))==1) || ((PINA&(1<<5))==1) || ((PINB&(1<<1))==1) || ((PINB&(1<<5))==1))  //判断此时灯在何处是亮的
    00167 B389      IN	R24,0x19
    00168 7082      ANDI	R24,2
    00169 3081      CPI	R24,1
    0016A F061      BEQ	0x0177
    0016B B389      IN	R24,0x19
    0016C 7280      ANDI	R24,0x20
    0016D 3081      CPI	R24,1
    0016E F041      BEQ	0x0177
    0016F B386      IN	R24,0x16
    00170 7082      ANDI	R24,2
    00171 3081      CPI	R24,1
    00172 F021      BEQ	0x0177
    00173 B386      IN	R24,0x16
    00174 7280      ANDI	R24,0x20
    00175 3081      CPI	R24,1
    00176 F409      BNE	0x0178
(0131)   {
(0132)     LED_down_1();
    00177 DF27      RCALL	_LED_down_1
(0133)   }
(0134)   if(((PINA&(1<<2))==1) || ((PINA&(1<<6))==1) || ((PINB&(1<<2))==1) || ((PINB&(1<<6))==1))  //判断此时灯在何处是亮的
    00178 B389      IN	R24,0x19
    00179 7084      ANDI	R24,4
    0017A 3081      CPI	R24,1
    0017B F061      BEQ	0x0188
    0017C B389      IN	R24,0x19
    0017D 7480      ANDI	R24,0x40
    0017E 3081      CPI	R24,1
    0017F F041      BEQ	0x0188
    00180 B386      IN	R24,0x16
    00181 7084      ANDI	R24,4
    00182 3081      CPI	R24,1
    00183 F021      BEQ	0x0188
    00184 B386      IN	R24,0x16
    00185 7480      ANDI	R24,0x40
    00186 3081      CPI	R24,1
    00187 F409      BNE	0x0189
(0135)   {
(0136)     LED_down_2();
    00188 DF53      RCALL	_LED_down_2
(0137)   }
(0138)   if(((PINA&(1<<3))==1) || ((PINA&(1<<7))==1) || ((PINB&(1<<3))==1) || ((PINB&(1<<7))==1))  //判断此时灯在何处是亮的
    00189 B389      IN	R24,0x19
    0018A 7088      ANDI	R24,0x8
    0018B 3081      CPI	R24,1
    0018C F061      BEQ	0x0199
    0018D B389      IN	R24,0x19
    0018E 7880      ANDI	R24,0x80
    0018F 3081      CPI	R24,1
    00190 F041      BEQ	0x0199
    00191 B386      IN	R24,0x16
    00192 7088      ANDI	R24,0x8
    00193 3081      CPI	R24,1
    00194 F021      BEQ	0x0199
    00195 B386      IN	R24,0x16
    00196 7880      ANDI	R24,0x80
    00197 3081      CPI	R24,1
    00198 F409      BNE	0x019A
(0139)   {
(0140)     LED_down_3();
    00199 DF7F      RCALL	_LED_down_3
(0141)   }
    0019A 9508      RET
(0142) }
(0143) 
(0144) void LED_right_0()
(0145) {
(0146)   if((PINC & (1<<PC2)) == 0)
_LED_right_0:
    0019B 999A      SBIC	0x13,2
    0019C C03A      RJMP	0x01D7
(0147)   {
    0019D C038      RJMP	0x01D6
(0148)     while(1)
(0149) 	{
(0150)       PORTB = 0x00;
    0019E 2422      CLR	R2
    0019F BA28      OUT	0x18,R2
(0151)       PORTA = 0x01;
    001A0 E081      LDI	R24,1
    001A1 BB8B      OUT	0x1B,R24
(0152) 	  delay(delayMs);
    001A2 9100 0060 LDS	R16,delayMs
    001A4 2711      CLR	R17
    001A5 DEA8      RCALL	_delay
(0153) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001A6 9B98      SBIS	0x13,0
    001A7 C004      RJMP	0x01AC
    001A8 9B99      SBIS	0x13,1
    001A9 C002      RJMP	0x01AC
    001AA 999B      SBIC	0x13,3
    001AB C001      RJMP	0x01AD
(0154) 	    break;
    001AC C02A      RJMP	0x01D7
(0155) 	  PORTA = 0x02;
    001AD E082      LDI	R24,2
    001AE BB8B      OUT	0x1B,R24
(0156) 	  delay(delayMs);
    001AF 9100 0060 LDS	R16,delayMs
    001B1 2711      CLR	R17
    001B2 DE9B      RCALL	_delay
(0157) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001B3 9B98      SBIS	0x13,0
    001B4 C004      RJMP	0x01B9
    001B5 9B99      SBIS	0x13,1
    001B6 C002      RJMP	0x01B9
    001B7 999B      SBIC	0x13,3
    001B8 C001      RJMP	0x01BA
(0158) 	    break;
    001B9 C01D      RJMP	0x01D7
(0159) 	  PORTA = 0x04;
    001BA E084      LDI	R24,4
    001BB BB8B      OUT	0x1B,R24
(0160) 	  delay(delayMs);
    001BC 9100 0060 LDS	R16,delayMs
    001BE 2711      CLR	R17
    001BF DE8E      RCALL	_delay
(0161) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001C0 9B98      SBIS	0x13,0
    001C1 C004      RJMP	0x01C6
    001C2 9B99      SBIS	0x13,1
    001C3 C002      RJMP	0x01C6
    001C4 999B      SBIC	0x13,3
    001C5 C001      RJMP	0x01C7
(0162) 	    break;
    001C6 C010      RJMP	0x01D7
(0163) 	  PORTA = 0x08;
    001C7 E088      LDI	R24,0x8
    001C8 BB8B      OUT	0x1B,R24
(0164) 	  delay(delayMs);
    001C9 9100 0060 LDS	R16,delayMs
    001CB 2711      CLR	R17
    001CC DE81      RCALL	_delay
(0165) 	  PORTA = 0x00;
    001CD 2422      CLR	R2
    001CE BA2B      OUT	0x1B,R2
(0166) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001CF 9B98      SBIS	0x13,0
    001D0 C004      RJMP	0x01D5
    001D1 9B99      SBIS	0x13,1
    001D2 C002      RJMP	0x01D5
    001D3 999B      SBIC	0x13,3
    001D4 C001      RJMP	0x01D6
(0167) 	    break;
    001D5 C001      RJMP	0x01D7
    001D6 CFC7      RJMP	0x019E
(0168)     }
(0169)   }
    001D7 9508      RET
(0170) }
(0171) 
(0172) void LED_right_1()
(0173) {
(0174)   if((PINC & (1<<PC2)) == 0)
_LED_right_1:
    001D8 999A      SBIC	0x13,2
    001D9 C03A      RJMP	0x0214
(0175)   {
    001DA C038      RJMP	0x0213
(0176)     while(1)
(0177) 	{
(0178)       PORTB = 0x00;
    001DB 2422      CLR	R2
    001DC BA28      OUT	0x18,R2
(0179)       PORTA = 0x10;
    001DD E180      LDI	R24,0x10
    001DE BB8B      OUT	0x1B,R24
(0180) 	  delay(delayMs);
    001DF 9100 0060 LDS	R16,delayMs
    001E1 2711      CLR	R17
    001E2 DE6B      RCALL	_delay
(0181) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001E3 9B98      SBIS	0x13,0
    001E4 C004      RJMP	0x01E9
    001E5 9B99      SBIS	0x13,1
    001E6 C002      RJMP	0x01E9
    001E7 999B      SBIC	0x13,3
    001E8 C001      RJMP	0x01EA
(0182) 	    break;
    001E9 C02A      RJMP	0x0214
(0183) 	  PORTA = 0x20;
    001EA E280      LDI	R24,0x20
    001EB BB8B      OUT	0x1B,R24
(0184) 	  delay(delayMs);
    001EC 9100 0060 LDS	R16,delayMs
    001EE 2711      CLR	R17
    001EF DE5E      RCALL	_delay
(0185) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001F0 9B98      SBIS	0x13,0
    001F1 C004      RJMP	0x01F6
    001F2 9B99      SBIS	0x13,1
    001F3 C002      RJMP	0x01F6
    001F4 999B      SBIC	0x13,3
    001F5 C001      RJMP	0x01F7
(0186) 	    break;
    001F6 C01D      RJMP	0x0214
(0187) 	  PORTA = 0x40;
    001F7 E480      LDI	R24,0x40
    001F8 BB8B      OUT	0x1B,R24
(0188) 	  delay(delayMs);
    001F9 9100 0060 LDS	R16,delayMs
    001FB 2711      CLR	R17
    001FC DE51      RCALL	_delay
(0189) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    001FD 9B98      SBIS	0x13,0
    001FE C004      RJMP	0x0203
    001FF 9B99      SBIS	0x13,1
    00200 C002      RJMP	0x0203
    00201 999B      SBIC	0x13,3
    00202 C001      RJMP	0x0204
(0190) 	    break;
    00203 C010      RJMP	0x0214
(0191) 	  PORTA = 0x80;
    00204 E880      LDI	R24,0x80
    00205 BB8B      OUT	0x1B,R24
(0192) 	  delay(delayMs);
    00206 9100 0060 LDS	R16,delayMs
    00208 2711      CLR	R17
    00209 DE44      RCALL	_delay
(0193) 	  PORTA = 0x00;
    0020A 2422      CLR	R2
    0020B BA2B      OUT	0x1B,R2
(0194) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    0020C 9B98      SBIS	0x13,0
    0020D C004      RJMP	0x0212
    0020E 9B99      SBIS	0x13,1
    0020F C002      RJMP	0x0212
    00210 999B      SBIC	0x13,3
    00211 C001      RJMP	0x0213
(0195) 	    break;
    00212 C001      RJMP	0x0214
    00213 CFC7      RJMP	0x01DB
(0196)     }
(0197)   }
    00214 9508      RET
(0198) }
(0199) 
(0200) void LED_right_2()
(0201) {
(0202)   if((PINC & (1<<PC2)) == 0)
_LED_right_2:
    00215 999A      SBIC	0x13,2
    00216 C03A      RJMP	0x0251
(0203)   {
    00217 C038      RJMP	0x0250
(0204)     while(1)
(0205) 	{
(0206)       PORTA = 0x00;
    00218 2422      CLR	R2
    00219 BA2B      OUT	0x1B,R2
(0207)       PORTB = 0x01;
    0021A E081      LDI	R24,1
    0021B BB88      OUT	0x18,R24
(0208) 	  delay(delayMs);
    0021C 9100 0060 LDS	R16,delayMs
    0021E 2711      CLR	R17
    0021F DE2E      RCALL	_delay
(0209) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    00220 9B98      SBIS	0x13,0
    00221 C004      RJMP	0x0226
    00222 9B99      SBIS	0x13,1
    00223 C002      RJMP	0x0226
    00224 999B      SBIC	0x13,3
    00225 C001      RJMP	0x0227
(0210) 	    break;
    00226 C02A      RJMP	0x0251
(0211) 	  PORTB = 0x02;
    00227 E082      LDI	R24,2
    00228 BB88      OUT	0x18,R24
(0212) 	  delay(delayMs);
    00229 9100 0060 LDS	R16,delayMs
    0022B 2711      CLR	R17
    0022C DE21      RCALL	_delay
(0213) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    0022D 9B98      SBIS	0x13,0
    0022E C004      RJMP	0x0233
    0022F 9B99      SBIS	0x13,1
    00230 C002      RJMP	0x0233
    00231 999B      SBIC	0x13,3
    00232 C001      RJMP	0x0234
(0214) 	    break;
    00233 C01D      RJMP	0x0251
(0215) 	  PORTB = 0x04;
    00234 E084      LDI	R24,4
    00235 BB88      OUT	0x18,R24
(0216) 	  delay(delayMs);
    00236 9100 0060 LDS	R16,delayMs
    00238 2711      CLR	R17
    00239 DE14      RCALL	_delay
(0217) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    0023A 9B98      SBIS	0x13,0
    0023B C004      RJMP	0x0240
    0023C 9B99      SBIS	0x13,1
    0023D C002      RJMP	0x0240
    0023E 999B      SBIC	0x13,3
    0023F C001      RJMP	0x0241
(0218) 	    break;
    00240 C010      RJMP	0x0251
(0219) 	  PORTB = 0x08;
    00241 E088      LDI	R24,0x8
    00242 BB88      OUT	0x18,R24
(0220) 	  delay(delayMs);
    00243 9100 0060 LDS	R16,delayMs
    00245 2711      CLR	R17
    00246 DE07      RCALL	_delay
(0221) 	  PORTB = 0x00;
    00247 2422      CLR	R2
    00248 BA28      OUT	0x18,R2
(0222) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    00249 9B98      SBIS	0x13,0
    0024A C004      RJMP	0x024F
    0024B 9B99      SBIS	0x13,1
    0024C C002      RJMP	0x024F
    0024D 999B      SBIC	0x13,3
    0024E C001      RJMP	0x0250
(0223) 	    break;
    0024F C001      RJMP	0x0251
    00250 CFC7      RJMP	0x0218
(0224)     }
(0225)   }
    00251 9508      RET
(0226) }
(0227) 
(0228) void LED_right_3()
(0229) {
(0230)   if((PINC & (1<<PC2)) == 0)
_LED_right_3:
    00252 999A      SBIC	0x13,2
    00253 C03A      RJMP	0x028E
(0231)   {
    00254 C038      RJMP	0x028D
(0232)     while(1)
(0233) 	{
(0234)       PORTA = 0x00;
    00255 2422      CLR	R2
    00256 BA2B      OUT	0x1B,R2
(0235)       PORTB = 0x10;
    00257 E180      LDI	R24,0x10
    00258 BB88      OUT	0x18,R24
(0236) 	  delay(delayMs);
    00259 9100 0060 LDS	R16,delayMs
    0025B 2711      CLR	R17
    0025C DDF1      RCALL	_delay
(0237) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    0025D 9B98      SBIS	0x13,0
    0025E C004      RJMP	0x0263
    0025F 9B99      SBIS	0x13,1
    00260 C002      RJMP	0x0263
    00261 999B      SBIC	0x13,3
    00262 C001      RJMP	0x0264
(0238) 	    break;
    00263 C02A      RJMP	0x028E
(0239) 	  PORTB = 0x20;
    00264 E280      LDI	R24,0x20
    00265 BB88      OUT	0x18,R24
(0240) 	  delay(delayMs);
    00266 9100 0060 LDS	R16,delayMs
    00268 2711      CLR	R17
    00269 DDE4      RCALL	_delay
(0241) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    0026A 9B98      SBIS	0x13,0
    0026B C004      RJMP	0x0270
    0026C 9B99      SBIS	0x13,1
    0026D C002      RJMP	0x0270
    0026E 999B      SBIC	0x13,3
    0026F C001      RJMP	0x0271
(0242) 	    break;
    00270 C01D      RJMP	0x028E
(0243) 	  PORTB = 0x40;
    00271 E480      LDI	R24,0x40
    00272 BB88      OUT	0x18,R24
(0244) 	  delay(delayMs);
    00273 9100 0060 LDS	R16,delayMs
    00275 2711      CLR	R17
    00276 DDD7      RCALL	_delay
(0245) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    00277 9B98      SBIS	0x13,0
    00278 C004      RJMP	0x027D
    00279 9B99      SBIS	0x13,1
    0027A C002      RJMP	0x027D
    0027B 999B      SBIC	0x13,3
    0027C C001      RJMP	0x027E
(0246) 	    break;
    0027D C010      RJMP	0x028E
(0247) 	  PORTB = 0x80;
    0027E E880      LDI	R24,0x80
    0027F BB88      OUT	0x18,R24
(0248) 	  delay(delayMs);
    00280 9100 0060 LDS	R16,delayMs
    00282 2711      CLR	R17
    00283 DDCA      RCALL	_delay
(0249) 	  PORTB = 0x00;
    00284 2422      CLR	R2
    00285 BA28      OUT	0x18,R2
(0250) 	  if((PINC&(1<<PC0))==0 || (PINC&(1<<PC1))==0 || (PINC&(1<<PC3))==0) //若按下其他的按键则跳出循环
    00286 9B98      SBIS	0x13,0
    00287 C004      RJMP	0x028C
    00288 9B99      SBIS	0x13,1
    00289 C002      RJMP	0x028C
    0028A 999B      SBIC	0x13,3
    0028B C001      RJMP	0x028D
(0251) 	    break;
    0028C C001      RJMP	0x028E
    0028D CFC7      RJMP	0x0255
(0252) 	  
(0253)     }
(0254)   }
    0028E 9508      RET
(0255) }
(0256) 
(0257) void LED_right()  
(0258) {
(0259)   if(((PINA&(1<<PA0))==1) || ((PINA&(1<<PA1))==1) || ((PINA&(1<<PA2))==1) || ((PINA&(1<<PA3))==1))  //判断此时灯在何处是亮的
_LED_right:
    0028F B389      IN	R24,0x19
    00290 7081      ANDI	R24,1
    00291 3081      CPI	R24,1
    00292 F061      BEQ	0x029F
    00293 B389      IN	R24,0x19
    00294 7082      ANDI	R24,2
    00295 3081      CPI	R24,1
    00296 F041      BEQ	0x029F
    00297 B389      IN	R24,0x19
    00298 7084      ANDI	R24,4
    00299 3081      CPI	R24,1
    0029A F021      BEQ	0x029F
    0029B B389      IN	R24,0x19
    0029C 7088      ANDI	R24,0x8
    0029D 3081      CPI	R24,1
    0029E F409      BNE	0x02A0
(0260)   {
(0261)     LED_right_0();
    0029F DEFB      RCALL	_LED_right_0
(0262)   }
(0263)   if(((PINA&(1<<PA4))==1) || ((PINA&(1<<PA5))==1) || ((PINA&(1<<PA6))==1) || ((PINA&(1<<PA7))==1))  //判断此时灯在何处是亮的
    002A0 B389      IN	R24,0x19
    002A1 7180      ANDI	R24,0x10
    002A2 3081      CPI	R24,1
    002A3 F061      BEQ	0x02B0
    002A4 B389      IN	R24,0x19
    002A5 7280      ANDI	R24,0x20
    002A6 3081      CPI	R24,1
    002A7 F041      BEQ	0x02B0
    002A8 B389      IN	R24,0x19
    002A9 7480      ANDI	R24,0x40
    002AA 3081      CPI	R24,1
    002AB F021      BEQ	0x02B0
    002AC B389      IN	R24,0x19
    002AD 7880      ANDI	R24,0x80
    002AE 3081      CPI	R24,1
    002AF F409      BNE	0x02B1
(0264)   {
(0265)     LED_right_1();
    002B0 DF27      RCALL	_LED_right_1
(0266)   }
(0267)   if(((PINB&(1<<PB0))==1) || ((PINB&(1<<PB1))==1) || ((PINB&(1<<PB2))==1) || ((PINB&(1<<PB3))==1))  //判断此时灯在何处是亮的
    002B1 B386      IN	R24,0x16
    002B2 7081      ANDI	R24,1
    002B3 3081      CPI	R24,1
    002B4 F061      BEQ	0x02C1
    002B5 B386      IN	R24,0x16
    002B6 7082      ANDI	R24,2
    002B7 3081      CPI	R24,1
    002B8 F041      BEQ	0x02C1
    002B9 B386      IN	R24,0x16
    002BA 7084      ANDI	R24,4
    002BB 3081      CPI	R24,1
    002BC F021      BEQ	0x02C1
    002BD B386      IN	R24,0x16
    002BE 7088      ANDI	R24,0x8
    002BF 3081      CPI	R24,1
    002C0 F409      BNE	0x02C2
(0268)   {
(0269)     LED_right_2();
    002C1 DF53      RCALL	_LED_right_2
(0270)   }
(0271)   if(((PINB&(1<<PB4))==1) || ((PINB&(1<<PB5))==1) || ((PINB&(1<<PB6))==1) || ((PINB&(1<<PB7))==1))  //判断此时灯在何处是亮的
    002C2 B386      IN	R24,0x16
    002C3 7180      ANDI	R24,0x10
    002C4 3081      CPI	R24,1
    002C5 F061      BEQ	0x02D2
    002C6 B386      IN	R24,0x16
    002C7 7280      ANDI	R24,0x20
    002C8 3081      CPI	R24,1
    002C9 F041      BEQ	0x02D2
    002CA B386      IN	R24,0x16
    002CB 7480      ANDI	R24,0x40
    002CC 3081      CPI	R24,1
    002CD F021      BEQ	0x02D2
    002CE B386      IN	R24,0x16
    002CF 7880      ANDI	R24,0x80
    002D0 3081      CPI	R24,1
    002D1 F409      BNE	0x02D3
(0272)   {
(0273)     LED_right_3();
    002D2 DF7F      RCALL	_LED_right_3
(0274)   }
    002D3 9508      RET
(0275) }
(0276) 
(0277) void LED_up()
(0278) {
_LED_up:
    002D4 9508      RET
(0279) 
(0280) }
(0281) 
(0282) void LED_left()
(0283) {
_LED_left:
    002D5 9508      RET
(0284) 
(0285) }
(0286) 
(0287) void LED_init()  //向右移动，初始值
(0288) {
(0289)   PORTA = 0x01;
_LED_init:
    002D6 E081      LDI	R24,1
    002D7 BB8B      OUT	0x1B,R24
(0290)   delay(delayMs);
    002D8 9100 0060 LDS	R16,delayMs
    002DA 2711      CLR	R17
    002DB DD72      RCALL	_delay
(0291)   LED_down_0();  //按下下按键时
    002DC DD85      RCALL	_LED_down_0
(0292)   PORTA = 0x02;
    002DD E082      LDI	R24,2
    002DE BB8B      OUT	0x1B,R24
(0293)   delay(delayMs);
    002DF 9100 0060 LDS	R16,delayMs
    002E1 2711      CLR	R17
    002E2 DD6B      RCALL	_delay
(0294)   LED_down_1();  //按下下按键时
    002E3 DDBB      RCALL	_LED_down_1
(0295)   PORTA = 0x04;
    002E4 E084      LDI	R24,4
    002E5 BB8B      OUT	0x1B,R24
(0296)   delay(delayMs);
    002E6 9100 0060 LDS	R16,delayMs
    002E8 2711      CLR	R17
    002E9 DD64      RCALL	_delay
(0297)   LED_down_2();  //按下下按键时
    002EA DDF1      RCALL	_LED_down_2
(0298)   PORTA = 0x08;
    002EB E088      LDI	R24,0x8
    002EC BB8B      OUT	0x1B,R24
(0299)   delay(delayMs);
    002ED 9100 0060 LDS	R16,delayMs
    002EF 2711      CLR	R17
    002F0 DD5D      RCALL	_delay
(0300)   LED_down_3();  //按下下按键时
    002F1 CE27      RJMP	_LED_down_3
(0301) }
(0302) 
(0303) void main()
(0304) {
(0305)   DDRA = 0xff;
_main:
    002F2 EF8F      LDI	R24,0xFF
    002F3 BB8A      OUT	0x1A,R24
(0306)   DDRB = 0xff;
    002F4 BB87      OUT	0x17,R24
(0307)   DDRC = 0x00;
    002F5 2422      CLR	R2
    002F6 BA24      OUT	0x14,R2
(0308)   PORTA = 0x00;
    002F7 BA2B      OUT	0x1B,R2
(0309)   PORTB = 0x00;
    002F8 BA28      OUT	0x18,R2
(0310)   PORTC = 0x0f;
    002F9 E08F      LDI	R24,0xF
    002FA BB85      OUT	0x15,R24
    002FB C028      RJMP	0x0324
(0311)   while(1)
(0312)   {
(0313)     PORTA = 0x01;
    002FC E081      LDI	R24,1
    002FD BB8B      OUT	0x1B,R24
(0314) 	delay(delayMs);
    002FE 9100 0060 LDS	R16,delayMs
    00300 2711      CLR	R17
    00301 DD4C      RCALL	_delay
(0315) 	LED_up();
    00302 DFD1      RCALL	_LED_up
(0316) 	LED_down();
    00303 DE52      RCALL	_LED_down
(0317) 	LED_left();
    00304 DFD0      RCALL	_LED_left
(0318) 	LED_right();
    00305 DF89      RCALL	_LED_right
(0319) 	
(0320) 	PORTA = 0x02;
    00306 E082      LDI	R24,2
    00307 BB8B      OUT	0x1B,R24
(0321) 	delay(delayMs);
    00308 9100 0060 LDS	R16,delayMs
    0030A 2711      CLR	R17
    0030B DD42      RCALL	_delay
(0322) 	LED_up();
    0030C DFC7      RCALL	_LED_up
(0323) 	LED_down();
    0030D DE48      RCALL	_LED_down
(0324) 	LED_left();
    0030E DFC6      RCALL	_LED_left
(0325) 	LED_right();
    0030F DF7F      RCALL	_LED_right
(0326) 	
(0327) 	PORTA = 0x04;
    00310 E084      LDI	R24,4
    00311 BB8B      OUT	0x1B,R24
(0328) 	delay(delayMs);
    00312 9100 0060 LDS	R16,delayMs
    00314 2711      CLR	R17
    00315 DD38      RCALL	_delay
(0329) 	LED_up();
    00316 DFBD      RCALL	_LED_up
(0330) 	LED_down();
    00317 DE3E      RCALL	_LED_down
(0331) 	LED_left();
    00318 DFBC      RCALL	_LED_left
(0332) 	LED_right();
    00319 DF75      RCALL	_LED_right
(0333) 	
(0334) 	PORTA = 0x08;
    0031A E088      LDI	R24,0x8
    0031B BB8B      OUT	0x1B,R24
(0335) 	delay(delayMs);
    0031C 9100 0060 LDS	R16,delayMs
    0031E 2711      CLR	R17
    0031F DD2E      RCALL	_delay
(0336) 	LED_up();
    00320 DFB3      RCALL	_LED_up
(0337) 	LED_down();
    00321 DE34      RCALL	_LED_down
(0338) 	LED_left();
    00322 DFB2      RCALL	_LED_left
(0339) 	LED_right();
FILE: <library>
    00323 DF6B      RCALL	_LED_right
    00324 CFD7      RJMP	0x02FC
    00325 9508      RET
push_xgsetF000:
    00326 937A      ST	-Y,R23
    00327 936A      ST	-Y,R22
    00328 935A      ST	-Y,R21
    00329 934A      ST	-Y,R20
    0032A 9508      RET
pop_xgsetF000:
    0032B 9149      LD	R20,Y+
    0032C 9159      LD	R21,Y+
    0032D 9169      LD	R22,Y+
    0032E 9179      LD	R23,Y+
    0032F 9508      RET
